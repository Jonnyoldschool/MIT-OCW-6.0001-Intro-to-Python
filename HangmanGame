# Problem Set 2, hangman.py
# Name: 
# Collaborators:
# Time spent:

# Hangman Game
# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)
import random
import string

WORDLIST_FILENAME = "words.txt"


def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist



def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)
    
    Returns a word from wordlist at random
    """
    return random.choice(wordlist)

# end of helper code

# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = load_words()

def score(secret_word, lives):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are lowercase
    lives: the number of lives the player has left
    returns: the number of unique letters in secret_word
    '''
    unique = []
    for char in secret_word:
        if char not in unique:
            unique.append(char)
    if lives < 0:
        lives = 0
    score = lives * len(unique)
    return score

def is_word_guessed(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are
      lowercase
    letters_guessed: list (of letters), which letters have been guessed so far;
      assumes that all letters are lowercase
    returns: boolean, True if all the letters of secret_word are in letters_guessed;
      False otherwise
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    common_letters = 0
    for char1 in secret_word:
        for char2 in letters_guessed:
            if char2 == char1:
                common_letters += 1
                break
    if common_letters == len(secret_word):
        print("Oh my fucking god you got it! The word was", secret_word + "!")
        return True
    else:
        return False
             

def get_guessed_word(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string, comprised of letters, underscores (_), and spaces that represents
      which letters in secret_word have been guessed so far.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    index = 0
    current_guess = (["_",]*len(secret_word))
    for char in secret_word:
        index += 1
        if char in letters_guessed:
            current_guess[index-1] = char
    return current_guess   
                

def get_available_letters(letters_guessed):
    '''
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string (of letters), comprised of letters that represents which letters have not
      yet been guessed.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    available_letters = []
    for char in alphabet:
        if char not in letters_guessed:
            available_letters.append(char)
    return available_letters        
            
    
    
    

def hangman(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!
    
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
    
    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    lives = 6
    warnings = 3
    vowels = "aeiou"
    letters_guessed = []
    print("I am thinking of a word that is", len(secret_word), "letters long.")
    while is_word_guessed(secret_word, letters_guessed) == False:
        if lives <= 0:
            print("You have no lives left. GAME OVER!")
            print("The word I was thinking of was", secret_word)
            break
        else:
            print("You have", str(warnings), "warnings left.")
            print("You have", str(lives), "guesses left.")
            available_letters = get_available_letters(letters_guessed)
            print("Available letters:", "".join(available_letters))
            guess = str.lower(input("Type your guess:"))
            if guess in available_letters:
                letters_guessed.append(guess)
                if guess in secret_word:
                    print("Correct!", str(guess), "is in the secret word!")
                else:
                    print("Sorry!", str(guess), "is not in the secret word!")
                    if guess in vowels:
                        lives -= 2
                    else:
                        lives -= 1
            else:
                if str.isalpha(guess) == False:
                    print("Your guess must be a letter, dumbie!")
                else:
                    print("You can't guess the same letter twice, dumbie!")
                if warnings == 0:
                    lives -= 1
                else:
                    warnings -= 1
            print(" ".join(get_guessed_word(secret_word, letters_guessed)))
            print("-------------------------------------------------------")
    print("Your score was", score(secret_word, lives))
            


# When you've completed your hangman function, scroll down to the bottom
# of the file and uncomment the first two lines to test
#(hint: you might want to pick your own
# secret_word while you're doing your own testing)


# -----------------------------------



def match_with_gaps(my_word, other_word):
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the 
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise: 
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    index = 0
    if len(my_word) == len(other_word):
        for char in my_word:
            if char != other_word[index] and char != "_":
                return False
                break
            else:
                index += 1
        return True
    else:
        return False       
    



def show_possible_matches(my_word):
    '''
    my_word: string with _ characters, current guess of secret word
    returns: nothing, but should print out every word in wordlist that matches my_word
             Keep in mind that in hangman when a letter is guessed, all the positions
             at which that letter occurs in the secret word are revealed.
             Therefore, the hidden letter(_ ) cannot be one of the letters in the word
             that has already been revealed.

    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    possible_words = []
    for words in wordlist:
        if match_with_gaps(my_word, words) == True:
            index = 0
            matching_letters = 0
            for letter in words:
                if letter in my_word and letter != my_word[index]:
                    break
                else:
                    matching_letters += 1           
                if matching_letters != len(words):
                    index += 1
                else:
                    possible_words.append(words)
    return print(str(possible_words)[1:-1])
                    

def hangman_with_hints(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses
    
    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Make sure to check that the user guesses a letter
      
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
      
    * If the guess is the symbol *, print out all words in wordlist that
      matches the current guessed word. 
    
    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    lives = 6
    warnings = 3
    vowels = "aeiou"
    letters_guessed = []
    print("I am thinking of a word that is", len(secret_word), "letters long.")
    while is_word_guessed(secret_word, letters_guessed) == False:
        if lives <= 0:
            print("You have no lives left. GAME OVER!")
            print("The word I was thinking of was", secret_word)
            break
        else:
            print("You have", str(warnings), "warnings left.")
            print("You have", str(lives), "guesses left.")
            available_letters = get_available_letters(letters_guessed)
            print("Available letters:", "".join(available_letters))
            guess = str.lower(input("Type your guess:"))
            if guess in available_letters:
                letters_guessed.append(guess)
                if guess in secret_word:
                    print("Correct!", str(guess), "is in the secret word!")
                else:
                    print("Sorry!", str(guess), "is not in the secret word!")
                    if guess in vowels:
                        lives -= 2
                    else:
                        lives -= 1
            elif guess == "*":
                print("The word I'm thinking of is one of these words:")
                show_possible_matches("".join(get_guessed_word(secret_word, letters_guessed)))
            else:
                if str.isalpha(guess) == False:
                    print("Your guess must be a letter, dumbie!")
                else:
                    print("You can't guess the same letter twice, dumbie!")
                if warnings == 0:
                    lives -= 1
                else:
                    warnings -= 1
            print(" ".join(get_guessed_word(secret_word, letters_guessed)))
            print("-------------------------------------------------------")
    print("Your score was", score(secret_word, lives))



# When you've completed your hangman_with_hint function, comment the two similar
# lines above that were used to run the hangman function, and then uncomment
# these two lines and run this file to test!
# Hint: You might want to pick your own secret_word while you're testing.


if __name__ == "__main__":
    pass

    # To test part 2, comment out the pass line above and
    # uncomment the following two lines.
    
#    secret_word = choose_word(wordlist)
#    hangman(secret_word)

###############
    
    # To test part 3 re-comment out the above lines and 
    # uncomment the following two lines. 
    
    secret_word = choose_word(wordlist)
    hangman_with_hints(secret_word)
